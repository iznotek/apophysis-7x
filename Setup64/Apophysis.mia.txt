Comment: Apophysis Setup Project
 
[DEFINE REGION: Check Application Requirements]
Get System Setting Windows in 64 bit Mode into CHECKSYSTEM
if Variable CHECKSYSTEM not Equals TRUE
  MessageBox: $TITLE$ Setup Error, This product requires at least a 64 bit operating system.$NEWLINE$$NEWLINE$Setup cannot continue.
  Terminate Installation
end
Set x64 - Native 64 bit Windows, AMD64 and EM64T Architectures - installation mode
Get System Setting 24-bit Color Depth (High Colors) into CHECKSYSTEM
if Variable CHECKSYSTEM not Equals TRUE
  MessageBox: $TITLE$ Setup Error, This product requires at least 24-bit Color Depth (High Colors).$NEWLINE$$NEWLINE$Setup cannot continue.
  Terminate Installation
end
Get System Setting 800x600 Resolution into CHECKSYSTEM
if Variable CHECKSYSTEM not Equals TRUE
  MessageBox: $TITLE$ Setup Error, This product requires at least 800x600 Resolution.$NEWLINE$$NEWLINE$Setup cannot continue.
  Terminate Installation
end
Get System Setting 256 MB Physical Memory into CHECKSYSTEM
if Variable CHECKSYSTEM not Equals TRUE
  MessageBox: $TITLE$ Setup Error, This product requires at least 256 MB Physical Memory.$NEWLINE$$NEWLINE$Setup cannot continue.
  Terminate Installation
end
Get System Setting Windows XP into CHECKSYSTEM
if Variable CHECKSYSTEM not Equals TRUE
  MessageBox: $TITLE$ Setup Error, This product requires at least Windows XP.$NEWLINE$$NEWLINE$Setup cannot continue.
  Terminate Installation
end
Comment: Check system has at least Windows XP
 
Comment: Check system has at least 512 MB Physical Memory
Get System Setting 512 MB Physical Memory into CHECKMEM
if Variable CHECKMEM not Equals TRUE
  MessageBox: $TITLE$ Setup Error, Apophysis requires at least 512 MB Physical Memory to work properly. Setup will continue anyway but there may be problems in executing Apophysis 7x.
end
 
[END REGION]
 
[DEFINE REGION: Check/Install Application Pre-Requisites]
 
[DEFINE REGION: Check Application Pre-Requisites]
Comment: Check setup pre-requisites
Set Variable PREREQ to FALSE
Set Variable PRELIST to 
[compiler if Variable BUILDMODE not Equals PATCH]
if Variable NEEDSUPGRADE Equals TRUE
  Set Variable PREREQ to TRUE
  Set Variable PRELIST to $PRELIST$$NEWLINE$Previous Version Uninstallation
end
Include Script: checkmsi30
Include Script: checkmsi31
[compiler end]
[END REGION]
 
[DEFINE REGION: Install Application Pre-Requisites]
Comment: Install setup pre-requisites
if Variable PREREQ not Equals FALSE
  Display Dialog: prereq, wait for dialog to return (modal)
  if Variable WIZARD Equals CANCEL
    Terminate Installation
  end
  Display Dialog: progressprereq, use as progress dialog (non-modal)
  [compiler if Variable BUILDMODE not Equals PATCH]
  if Variable NEEDSUPGRADE Equals TRUE
    Set Variable REMOVEOLD to 
    Set Variable ERROROLD to 
    Install/Remove MSI Package $PRODUCTCODE$[REMOVE=ALL] (get result into variable REMOVEOLD)
    if Variable REMOVEOLD Equals ERROR
      MessageBox: $TITLE$ Setup, Unable to uninstall old version of $TITLE$. Please uninstall it yourself using Control Panel Add-Remove Programs before attempting to install this product.$NEWLINE$$NEWLINE$$ERROROLD$
      Terminate Installation
    end
    if Variable REMOVEOLD Equals REBOOT
      MessageBox: $TITLE$ Setup, Your computer needs to be restarted before $TITLE$ Setup can continue.$NEWLINE$$NEWLINE$Please save your work in all running programs and click OK to restart your computer. Setup will resume once your computer restarts.$NEWLINE$$NEWLINE$If you click CANCEL, setup will exit. You will have to run setup again at a later time to install $TITLE$.
      if Variable REBOOTNOW Equals OK
        Reboot Computer and Resume Setup
      else
        Terminate Installation
      end
    end
    Set Variable MAINTENANCE to FALSE
  end
  [DEFINE WEB MEDIA Microsoft Windows Installer 3.0]
  Include Script: setupmsi30
  [DEFINE WEB MEDIA Microsoft Windows Installer 3.1]
  Include Script: setupmsi31
  [compiler end]
  Hide Dialog
end
[END REGION]
 
[END REGION]
 
[DEFINE REGION: Define Setup Globals]
Comment: Define Setup Components
Define Component: Translations\German
Define Component: Translations\Italian
Define Component: Translations\Chinese
Define Component: Translations
 
Comment: Initialize Setup Globals
Get System Setting Windows NT Kernel (NT4, 2000, XP, 2003, Vista, 2008) into ISNT
Get Folder Location System->Application Data Directory into MYAPPDATA
Get Folder Location System->Program Files Directory into PROGRAMFILES
Get Common Folder Location System->Program Files Directory into COMMONFILES
Get Common Folder Location Start Menu->Programs Group into SHORTCUTFILESALL
Get Folder Location Start Menu->Programs Group into SHORTCUTFILES
if Variable SHORTCUTFILESALL Equals 
  Set Variable SHORTCUTFILESALL to $SHORTCUTFILES$
end
Get Folder Location System->Desktop Directory into DESKTOPDIR
Get Folder Location System->Windows Directory into WINDIR
Get Folder Location System->System Directory into WINSYSDIR
Get Folder Location Taskbar->Quick Launch Directory into QUICKLAUNCHDIR
Get Folder Location WWW->WWWRoot into WWWROOTDIR
[END REGION]
 
[DEFINE REGION: Setup User Interview]
if Variable MAINTENANCE Equals TRUE
  GoTo Label: Maintenance
else
  [compiler if Variable BUILDMODE not Equals PATCH]
  Comment: First Time Install
  Set Variable TARGETDIR to $PROGRAMFILES$\$TITLE$
  Set Variable STARTMENU to $TITLE$
  [compiler end]
end
 
label: Welcome Dialog
Display Dialog: welcome, wait for dialog to return (modal)
if Variable WIZARD Equals CANCEL
  GoTo Label: Main Install
end
[compiler if Variable BUILDMODE not Equals PATCH]
label: License Check
Comment: Display Dialog: licensecheck, wait for dialog to return (modal)
if Variable WIZARD Equals BACK
  GoTo Label: Welcome Dialog
else
  if Variable WIZARD Equals CANCEL
    GoTo Label: Main Install
  end
end
label: ReadMe Information
Comment: Display Dialog: readme, wait for dialog to return (modal)
if Variable WIZARD Equals BACK
  GoTo Label: License Check
else
  if Variable WIZARD Equals CANCEL
    GoTo Label: Main Install
  end
end
label: User Registration
Comment: Display Dialog: registration, wait for dialog to return (modal)
if Variable WIZARD Equals BACK
  GoTo Label: ReadMe Information
else
  if Variable WIZARD Equals CANCEL
    GoTo Label: Main Install
  end
end
label: Setup Type
Display Dialog: setuptype, wait for dialog to return (modal)
if Variable WIZARD Equals BACK
  GoTo Label: User Registration
else
  if Variable WIZARD Equals CANCEL
    GoTo Label: Main Install
  end
end
Comment: TO-DO: Customize your minimum setup here
if Variable MINIMUM Equals TRUE
  Deselect Component: Translations\Chinese
  Deselect Component: Translations\Italian
  Deselect Component: Translations\German
  Deselect Component: Translations
else
  if Variable COMPLETE Equals TRUE
    Select Component: Translations\Chinese
    Select Component: Translations\Italian
    Select Component: Translations\German
    Select Component: Translations
  end
end
label: Custom Setup
Display Dialog: componentstree (if variable PERSONALIZED is TRUE), wait for dialog to return (modal)
if Variable WIZARD Equals BACK
  GoTo Label: Setup Type
else
  if Variable WIZARD Equals CANCEL
    GoTo Label: Main Install
  end
end
label: Destination Directory
Display Dialog: destination, wait for dialog to return (modal)
if Variable WIZARD Equals BACK
  GoTo Label: Custom Setup
else
  if Variable WIZARD Equals CANCEL
    GoTo Label: Main Install
  end
end
label: Start Menu
Display Dialog: startmenu, wait for dialog to return (modal)
if Variable WIZARD Equals BACK
  GoTo Label: Destination Directory
else
  if Variable WIZARD Equals CANCEL
    GoTo Label: Main Install
  end
end
[compiler end]
label: Start Installation
Display Dialog: startinstallation, wait for dialog to return (modal)
if Variable WIZARD Equals BACK
  [compiler if Variable BUILDMODE not Equals PATCH]
  GoTo Label: Start Menu
  [compiler else]
  GoTo Label: Welcome Dialog
  [compiler end]
else
  GoTo Label: Main Install
end
 
label: Maintenance
Comment: Maintenance Install/Uninstall
Set Variable UNINSTALL to YES
MessageBox: $TITLE$ Uninstall, Are you sure you want to uninstall the selected application and all of its components?
if Variable UNINSTALL Equals NO
  Terminate Installation
else
  Set Variable REMOVE to TRUE
end
[END REGION]
 
[DEFINE REGION: Process (Un)Installation]
label: Main Install
Comment: Exit Setup if Wizard Loop cancelled
if Variable WIZARD Equals CANCEL
  Terminate Installation
end
 
Comment: Prepare to install
Set Variable PROGRESSTEXT to Installing $TITLE$
Set Variable SUCCESS to 
Set Variable LASTERROR to 
if Variable ALLUSERS Equals TRUE
  Set Variable SHORTCUTFOLDER to $SHORTCUTFILESALL$\$STARTMENU$
else
  Set Variable SHORTCUTFOLDER to $SHORTCUTFILES$\$STARTMENU$
end
Display Dialog: progress, use as progress dialog (non-modal)
 
Comment: Modify Target System
[DEFINE REGION: Perform Uninstallation]
if Variable REMOVE Equals TRUE
  Comment: Uninstall product
  Comment: TO-DO: Insert any additional uninstall commands here
  Apply Uninstall (get result into variable SUCCESS)
  if Variable SUCCESS not Equals ERROR
    if Variable SUCCESS not Equals CANCEL
    end
  end
  Set Variable PROGRESS to 100
else
  [END REGION]
  [DEFINE REGION: Perform First Time or Maintenance Installation]
  Comment: Install/Re-Install product
  Create Shortcut $SHORTCUTFOLDER$\Uninstall Apophysis 7x to $UNINSTALLLINK$
  [OFFLINE CONTENT]
  Write Registry Key HKCU\Software\Apophysis 7x\Defaults\BatchSize, 10
  Write Registry Key HKCU\Software\Apophysis 7x\Defaults\RandomPrefix, Apo7x-
  Write Registry Key HKCU\Software\Apophysis 7x\Defaults\\AutoOpenLog, 0
  Write Registry Key HKCU\Software\Apophysis 7x\Defaults\\HelpPath, $TARGETDIR$\Apophysis7X.chm
  Write Registry Key HKCU\Software\Apophysis 7x\Defaults\\SmoothPaletteFile, $TARGETDIR$\cmap.ugr
  [DEFINE WEB MEDIA Apophysis 7x]
  if Variable SELECTED Equals TRUE
    Write Registry Key HKCU\Software\Apophysis 7x\Defaults\FunctionLibrary, $TARGETDIR$\functions.asc
  end
  [DEFINE WEB MEDIA Help file]
  if Variable SELECTED Equals TRUE
  end
  Install Files ..\..\Packages\Setup\Reset Settings.cmd to $TARGETDIR$
  Install Files ..\..\Packages\Setup\resinstall.exe to $TARGETDIR$
  Install Files ..\..\Packages\Setup\Resources\flame.ico to $TARGETDIR$\Resources
  Install Files ..\..\Packages\Setup\Resources\script.ico to $TARGETDIR$\Resources
  Install Files ..\..\Packages\Setup\Resources\template.ico to $TARGETDIR$\Resources
  Install Files ..\..\Packages\Setup\Resources\vista7-main.ico to $TARGETDIR$\Resources
  Install Files ..\..\Packages\Setup\Resources\xp2k-main.ico to $TARGETDIR$\Resources
  Install Files ..\..\Packages\Setup\Apophysis7X.chm to $TARGETDIR$
  Install Files ..\..\Packages\Setup\Apophysis7X.temp to $TARGETDIR$
  Install Files ..\..\Packages\Setup\Apophysis7X.ucl to $TARGETDIR$
  Install Files ..\..\Packages\Setup\cmap.ugr to $TARGETDIR$
  [DEFINE WEB MEDIA Scripts]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Normal version]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Normal version]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA High-memory version]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Templates]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA DC-Plugins]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Legacy variation pack]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Ex]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Handkerchief]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Fisheye]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Julia]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Auger]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA BCircle]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA JuliaN2]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA NPolar]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Octapol]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Ripple]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Sigmoid]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Swirl2]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA WavesN]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA XHeart]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA XtrB]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Xyrus' pack]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Auger]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA BCircle]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Julian2]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA NPolar]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Octapol]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Octapol]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Ripple]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Sigmoid]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Swirl2]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA WavesN]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA XHeart]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA XtrB]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Xyrus' variation pack]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Official variation pack]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA DirectColor variation pack]
  if Variable SELECTED Equals TRUE
  end
  Install Files ..\..\Packages\Setup\Apophysis7X64.exe to $TARGETDIR$
  Install Files ..\..\Packages\Setup\Run Lite-Version (64 bit).cmd to $TARGETDIR$
  Create Shortcut $SHORTCUTFOLDER$\Apophysis 7x (64 bit) to $TARGETDIR$\Apophysis7X64.exe
  [DEFINE WEB MEDIA Translations]
  Get Component Translations Selection State into Variable SELECTED
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA German]
  Get Component Translations\German Selection State into Variable SELECTED
  if Variable SELECTED Equals TRUE
    Install Files ..\..\Packages\Setup\Languages\german.xml to $TARGETDIR$\Languages
  end
  [DEFINE WEB MEDIA French]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Dutch]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Indonesian]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Lite version]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Italian]
  Get Component Translations\Italian Selection State into Variable SELECTED
  if Variable SELECTED Equals TRUE
    Install Files ..\..\Packages\Setup\Languages\italian.xml to $TARGETDIR$\Languages
  end
  [DEFINE WEB MEDIA Chinese]
  if Variable SELECTED Equals TRUE
  end
  [DEFINE WEB MEDIA Chinese]
  Get Component Translations\Chinese Selection State into Variable SELECTED
  if Variable SELECTED Equals TRUE
    Install Files ..\..\Packages\Setup\Languages\chinese.xml to $TARGETDIR$\Languages
  end
  [DEFINE WEB MEDIA Mandelbulb]
  if Variable SELECTED Equals TRUE
  end
  Comment: TO-DO: Insert any additional install commands here
  [compiler if Variable BUILDMODE Equals PATCH]
  Apply Patch (get result into variable SUCCESS)
  [compiler else]
  if Variable ADVERTISE Equals TRUE
    Apply Advertised (get result into variable SUCCESS)
  else
    Create Folder $TARGETDIR$\Templates
    Create File Type apoflame with extensions .FLAME and associate with program $TARGETDIR$\Apophysis7X64.exe
    Create Folder $TARGETDIR$\Resources
    Create File Type apotemplate with extensions .TEMPLATE and associate with program $TARGETDIR$\resinstall.exe
    Create Folder $TARGETDIR$\Languages
    Apply Install (get result into variable SUCCESS)
    if Variable SUCCESS not Equals ERROR
      if Variable SUCCESS not Equals CANCEL
      end
    end
  end
  [compiler end]
  Set Variable PROGRESS to 100
end
[END REGION]
[END REGION]
 
[DEFINE REGION: Finish Setup]
Comment: End of Installation
Hide Dialog
Display Dialog: finish, wait for dialog to return (modal)
if Variable SILENT Equals FALSE
  if Variable REBOOTCOMPUTER Equals TRUE
    if Variable SUCCESS Equals REBOOT
      Reboot Computer
    end
  end
  if Variable RUNAPP Equals TRUE
    if Variable REMOVE Equals FALSE
      if Variable SUCCESS Equals COMPLETE
        Comment: TO-DO: Insert command that starts your application here
      end
    end
  end
end
[END REGION]
 
